-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    nom character varying(100) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    date_naissance bigint,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    mot_de_passe text COLLATE pg_catalog."default",
    role character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'user'::character varying,
    date_inscription bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.auteurs
(
    id serial NOT NULL,
    nom character varying(100) COLLATE pg_catalog."default" NOT NULL,
    biographie text COLLATE pg_catalog."default",
    date_naissance bigint,
    date_deces bigint,
    date_creation bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    user_id integer,
    CONSTRAINT auteurs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.livres
(
    id serial NOT NULL,
    titre character varying(255) COLLATE pg_catalog."default" NOT NULL,
    auteur_id integer NOT NULL,
    categorie_id integer,
    disponible boolean DEFAULT true,
    cover_image_id integer,
    date_publication bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    isbn text COLLATE pg_catalog."default",
    descr text COLLATE pg_catalog."default",
    emplacement text COLLATE pg_catalog."default",
    file_id integer,
    annee_id integer NOT NULL,
    CONSTRAINT livres_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.academic_year
(
    start bigint NOT NULL,
    "end" bigint NOT NULL,
    id serial NOT NULL,
    CONSTRAINT academic_year_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.categories
(
    id serial NOT NULL,
    nom character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    date_creation bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    CONSTRAINT categories_pkey PRIMARY KEY (id),
    CONSTRAINT categories_nom_key UNIQUE (nom)
);

CREATE TABLE IF NOT EXISTS public.fichiers
(
    id serial NOT NULL,
    nom character varying(255) COLLATE pg_catalog."default" NOT NULL,
    chemin character varying(255) COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    taille integer NOT NULL,
    date_telechargement bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    CONSTRAINT fichiers_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.emprunts
(
    id serial NOT NULL,
    lecteur_id integer NOT NULL,
    livre_id integer NOT NULL,
    date_emprunt bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    date_retour bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    rendu boolean DEFAULT false,
    CONSTRAINT emprunts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.lecteurs
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    type character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'visiteur'::character varying,
    date_inscription bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    CONSTRAINT lecteurs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.abonnements
(
    id serial NOT NULL,
    lecteur_id integer NOT NULL,
    date_debut bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    date_fin bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    statut character varying(20) COLLATE pg_catalog."default" DEFAULT 'actif'::character varying,
    CONSTRAINT abonnements_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.paiements
(
    id serial NOT NULL,
    lecteur_id integer NOT NULL,
    montant numeric(10, 2) NOT NULL,
    date_paiement bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    commentaire text COLLATE pg_catalog."default",
    CONSTRAINT paiements_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    id serial NOT NULL,
    lecteur_id integer NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    date_notification bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    lu boolean DEFAULT false,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.administrateurs
(
    id serial NOT NULL,
    date_inscription bigint DEFAULT EXTRACT(epoch FROM CURRENT_TIMESTAMP),
    user_id integer,
    CONSTRAINT administrateurs_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.auteurs
    ADD CONSTRAINT auteurs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.livres
    ADD CONSTRAINT fk_livres_annee FOREIGN KEY (annee_id)
    REFERENCES public.academic_year (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.livres
    ADD CONSTRAINT livres_auteur_id_fkey FOREIGN KEY (auteur_id)
    REFERENCES public.auteurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.livres
    ADD CONSTRAINT livres_categorie_id_fkey FOREIGN KEY (categorie_id)
    REFERENCES public.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.livres
    ADD CONSTRAINT livres_cover_image_id_fkey FOREIGN KEY (cover_image_id)
    REFERENCES public.fichiers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.livres
    ADD CONSTRAINT livres_file_id_fkey FOREIGN KEY (file_id)
    REFERENCES public.fichiers (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.emprunts
    ADD CONSTRAINT emprunts_lecteur_id_fkey FOREIGN KEY (lecteur_id)
    REFERENCES public.lecteurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.emprunts
    ADD CONSTRAINT emprunts_livre_id_fkey FOREIGN KEY (livre_id)
    REFERENCES public.livres (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.lecteurs
    ADD CONSTRAINT lecteurs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.abonnements
    ADD CONSTRAINT abonnements_lecteur_id_fkey FOREIGN KEY (lecteur_id)
    REFERENCES public.lecteurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.paiements
    ADD CONSTRAINT paiements_lecteur_id_fkey FOREIGN KEY (lecteur_id)
    REFERENCES public.lecteurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_lecteur_id_fkey FOREIGN KEY (lecteur_id)
    REFERENCES public.lecteurs (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.administrateurs
    ADD CONSTRAINT administrateurs_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;